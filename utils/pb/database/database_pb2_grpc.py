# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import database_pb2 as database__pb2


class DatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/hello.Database/Read',
                request_serializer=database__pb2.ReadRequest.SerializeToString,
                response_deserializer=database__pb2.ReadResponse.FromString,
                )
        self.Write = channel.unary_unary(
                '/hello.Database/Write',
                request_serializer=database__pb2.WriteRequest.SerializeToString,
                response_deserializer=database__pb2.WriteResponse.FromString,
                )
        self.Modify = channel.unary_unary(
                '/hello.Database/Modify',
                request_serializer=database__pb2.ModifyRequest.SerializeToString,
                response_deserializer=database__pb2.ModifyResponse.FromString,
                )
        self.ModifyCommit = channel.unary_unary(
                '/hello.Database/ModifyCommit',
                request_serializer=database__pb2.ModifyCommitRequest.SerializeToString,
                response_deserializer=database__pb2.ModifyCommitResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/hello.Database/Lock',
                request_serializer=database__pb2.LockRequest.SerializeToString,
                response_deserializer=database__pb2.LockResponse.FromString,
                )
        self.Release = channel.unary_unary(
                '/hello.Database/Release',
                request_serializer=database__pb2.ReleaseRequest.SerializeToString,
                response_deserializer=database__pb2.ReleaseResponse.FromString,
                )
        self.OverwriteDB = channel.unary_unary(
                '/hello.Database/OverwriteDB',
                request_serializer=database__pb2.OverwriteDBRequest.SerializeToString,
                response_deserializer=database__pb2.OverwriteDBResponse.FromString,
                )


class DatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Modify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Release(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OverwriteDB(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=database__pb2.ReadRequest.FromString,
                    response_serializer=database__pb2.ReadResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=database__pb2.WriteRequest.FromString,
                    response_serializer=database__pb2.WriteResponse.SerializeToString,
            ),
            'Modify': grpc.unary_unary_rpc_method_handler(
                    servicer.Modify,
                    request_deserializer=database__pb2.ModifyRequest.FromString,
                    response_serializer=database__pb2.ModifyResponse.SerializeToString,
            ),
            'ModifyCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyCommit,
                    request_deserializer=database__pb2.ModifyCommitRequest.FromString,
                    response_serializer=database__pb2.ModifyCommitResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=database__pb2.LockRequest.FromString,
                    response_serializer=database__pb2.LockResponse.SerializeToString,
            ),
            'Release': grpc.unary_unary_rpc_method_handler(
                    servicer.Release,
                    request_deserializer=database__pb2.ReleaseRequest.FromString,
                    response_serializer=database__pb2.ReleaseResponse.SerializeToString,
            ),
            'OverwriteDB': grpc.unary_unary_rpc_method_handler(
                    servicer.OverwriteDB,
                    request_deserializer=database__pb2.OverwriteDBRequest.FromString,
                    response_serializer=database__pb2.OverwriteDBResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hello.Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/Read',
            database__pb2.ReadRequest.SerializeToString,
            database__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/Write',
            database__pb2.WriteRequest.SerializeToString,
            database__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Modify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/Modify',
            database__pb2.ModifyRequest.SerializeToString,
            database__pb2.ModifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/ModifyCommit',
            database__pb2.ModifyCommitRequest.SerializeToString,
            database__pb2.ModifyCommitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/Lock',
            database__pb2.LockRequest.SerializeToString,
            database__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Release(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/Release',
            database__pb2.ReleaseRequest.SerializeToString,
            database__pb2.ReleaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OverwriteDB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hello.Database/OverwriteDB',
            database__pb2.OverwriteDBRequest.SerializeToString,
            database__pb2.OverwriteDBResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
